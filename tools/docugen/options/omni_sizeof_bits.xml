<?xml version="1.0"?>
<MacroOp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Name>OMNI_SIZEOF_BITS</Name>
  <Brief>Gets the @c sizeof a type in bits</Brief>
  <Considerations>This macro is not affected by the platform architecture (i.e. @c x86 vs. @c x86_64 etc.)</Considerations>
  <Description>This macro is defined as the following:

@code
#define OMNI_SIZEOF_BITS(T) (sizeof(T) * CHAR_BIT)
@code

Where @c T is the type to get the size of.

Example:

@code
#define printv(v) std::cout &lt;&lt; #v &lt;&lt; " = " &lt;&lt; v &lt;&lt; std::endl
printv(OMNI_SIZEOF_BITS(char*));
printv(OMNI_SIZEOF_BITS(unsigned int));
printv(OMNI_SIZEOF_BITS(unsigned long));
printv(OMNI_SIZEOF_BITS(double));
@code

Output on a 32-bit x86 system:
&lt;code&gt;
OMNI_SIZEOF_BITS(char*) = 32
OMNI_SIZEOF_BITS(unsigned int) = 32
OMNI_SIZEOF_BITS(unsigned long) = 32
OMNI_SIZEOF_BITS(double) = 64
&lt;/code&gt;
Output on a 64-bit x86 system:
&lt;code&gt;
OMNI_SIZEOF_BITS(char*) = 64
OMNI_SIZEOF_BITS(unsigned int) = 32
OMNI_SIZEOF_BITS(unsigned long) = 32
OMNI_SIZEOF_BITS(double) = 64
&lt;/code&gt;
</Description>
  <Notes>None.</Notes>
  <PlatformSpecific>The size of the type is multiplied by @c CHAR_BIT to get the number of bits representative of a byte on the specific platform (usually @c CHAR_BIT is 8). If you rely on the size of the bits to be a specific size, you will need to take note of this.</PlatformSpecific>
  <Synopsis>This macro can be utilized to get the size of an object in bits.</Synopsis>
  <IsHelper>true</IsHelper>
  <IsConstant>false</IsConstant>
  <IsFWHelp>false</IsFWHelp>
</MacroOp>