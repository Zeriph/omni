<?xml version="1.0"?>
<MacroOp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Name>OMNI_BIND_EX</Name>
  <Brief>A helper macro for binding the omni::delegate.</Brief>
  <Considerations>This macro is only applicable to binding of non-static member functions (namespace functions are not non-static member functions and can be addressed the same as a non-member function).</Considerations>
  <Description>When binding a function to an omni::delegate (or an omni::event), you can use the static bind function of the delegate class to attach a non-static class member function by specifying the full delegate signature and the class, it's function and the associated instance to bind to; as an example, using the omni::delegate1 which takes one parameter in the function signature:

@code
my_class obj;
omni::event1&lt;void, int&gt; my_event;
my_event += omni::delegate1&lt;void, int&gt;::bind&lt;my_class, &amp;my_class::class_function&gt;(obj);
// or 
omni::delegate1&lt;void, int&gt; my_delegate = omni::delegate1&lt;void, int&gt;::bind&lt;my_class, &amp;my_class::class_function&gt;(obj);
my_event += my_delegate;
@code

As you can see, this can get very verbose when working with more complex function signatures and class types. To help alleviate some of this verbosity in the code you could elect to use the OMNI_BIND helper macro.

Example:

@code
my_class obj;
omni::event1&lt;void, int&gt; my_event;
my_event += omni_bind(void, int, my_class, class_function, obj);
// or 
omni::delegate1&lt;void, int&gt; my_delegate = omni_bind(void, int, my_class, class_function, obj);
my_event += my_delegate;
@code

Since this is just a helper macro, it's intended use is mostly to help the verbosity of binding a member function. You could alternatively typedef a more complex delegate type and perform similar functionality.

Example:

@code
typedef omni::delegate1&lt;void, int&gt; delegate_t;
typedef omni::event1&lt;void, int&gt; event_t;
my_class obj;
event_t my_event;
my_event += delegate_t::bind&lt;my_class, &amp;my_class::class_function&gt;(obj);
// or 
delegate_t my_delegate = delegate_t::bind&lt;my_class, &amp;my_class::class_function&gt;(obj);
my_event += my_delegate;
@code

In this case you could also use the OMNI_BIND_EX macro to specify the @c delegate_t delegate type as the specific binding delegate.

Example:

@code
typedef omni::event1&lt;void, int&gt; event_t;
typedef omni::delegate1&lt;void, int&gt; delegate_t;
// or typedef event_t::delegate_t delegate_t;

my_class obj;
event_t my_event;
my_event += OMNI_BIND_EX(delegate_t, my_class, class_function, obj);
// or 
delegate_t my_delegate = OMNI_BIND_EX(delegate_t, my_class, class_function, obj);
my_event += my_delegate;
@code
</Description>
  <Notes>None.</Notes>
  <PlatformSpecific>No platform specific notes.</PlatformSpecific>
  <Synopsis>This macro is a helper macro. It's purpose is to make binding to an omni::delegate less verbose when needing to bind to a non-static class member function.

This macro is similar to the OMNI_BIND macro except that it allows you to specify a delegate type (either an explicit delegate type or a typedef'd delegate)

This macro is only for non-static class members (i.e. a class/struct member function) since binding to a static function is already less verbose (e.g. you can simply say &lt;code&gt;omni::delegate d = &amp;some_function&lt;/code&gt;);

The macro is defined as such:

@code
#define OMNI_BIND_EX(DelegateType, Class, Function, Obj) DelegateType::bind&lt;Class, &amp;Class::Function&gt;(Obj)
@code

Where @c DelegateType is the delegate type to use, @c Class is the class type, @c Function is the member function of the @c Class specified (only the function name, not the full scope as the macro will expand this), and lastly @c Obj is the instance object needing to be passed in.

Since OMNI_BIND_EX takes a delegate type as it's first parameter, there are no @c OMNI_BINDn_EX, that is to say, there is no @c OMNI_BIND1_EX or @c OMNI_BIND2_EX and so on.
</Synopsis>
  <IsHelper>true</IsHelper>
  <IsConstant>false</IsConstant>
  <IsFWHelp>false</IsFWHelp>
</MacroOp>